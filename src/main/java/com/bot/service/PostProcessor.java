package com.bot.service;

import com.bot.model.Post;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.sql.*;

@Component
public class PostProcessor {
    private static final String URL = "jdbc:mysql://localhost:3306/botdb?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&useUnicode=true";
    private static final String USER = "bestuser";
    private static final String PASSWORD = "bestuser";

    static String OPENAI_API_KEY = System.getenv("OPENAI_API_KEY");
    private static final String OPENAI_API_URL = "https://api.openai.com/v1/chat/completions";

    // üîπ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
    @Scheduled(fixedRate = 6000)
    public void processNewPosts() {
        System.out.println("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏...");
        Post post = fetchUnprocessedPost();
        if (post != null) {
            System.out.println("üì© –í–∏–±—Ä–∞–Ω–∏–π –ø–æ—Å—Ç: " + post.getText());

            // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ GPT-4
            String newText = rewriteText(post.getText());
            System.out.println("‚úçÔ∏è –û–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç: " + newText);

            // üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–ø–æ–∫–∏ —â–æ –±–µ–∑ –∑–º—ñ–Ω)
            byte[] newImage = modifyImage(post.getImage());
            System.out.println("üñºÔ∏è –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–µ!");

            // üîπ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ `original_posts`
            saveOriginalPost(post.getId(), newText, newImage);

            // üîπ –ü–æ–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Å—Ç —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π
            markPostAsProcessed(post.getId());

            // üîπ –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –≤ Telegram –ø—ñ–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
            if (!newText.startsWith("‚ùå") && newText.length() > 10) {
                System.out.println("üì¢ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤ Telegram: " + newText);
            } else {
                System.out.println("‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –ø–æ–º–∏–ª–∫—É, –Ω–µ –ø—É–±–ª—ñ–∫—É—î–º–æ –≤ Telegram!");
            }

            System.out.println("‚úÖ –ü–æ—Å—Ç –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π!");
        } else {
            System.out.println("‚ùå –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.");
        }
    }

    // üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ù–ï–û–ë–†–û–ë–õ–ï–ù–û–ì–û –ø–æ—Å—Ç–∞
    private Post fetchUnprocessedPost() {
        String sql = "SELECT id, text, image FROM telegram_posts WHERE processed = FALSE ORDER BY id ASC LIMIT 1";

        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            if (rs.next()) {
                int id = rs.getInt("id");
                String text = rs.getString("text");
                byte[] image = rs.getBytes("image");
                return new Post(id, text, image);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    // üîπ –ü–æ–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Å—Ç —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π
    private void markPostAsProcessed(int postId) {
        String sql = "UPDATE telegram_posts SET processed = TRUE WHERE id = ?";

        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, postId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // üîπ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è GPT-4 –¥–ª—è –∑–º—ñ–Ω–∏ —Ç–µ–∫—Å—Ç—É
    private String rewriteText(String originalText) {
        System.out.println("üîë OpenAI API Key: " + OPENAI_API_KEY);

        if (OPENAI_API_KEY == null || OPENAI_API_KEY.isEmpty()) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: API-–∫–ª—é—á OpenAI –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            return "‚ùå –ü–æ–º–∏–ª–∫–∞: API-–∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π.";
        }

        try (CloseableHttpClient client = HttpClients.createDefault()) {
            HttpPost request = new HttpPost(OPENAI_API_URL);
            request.setHeader("Authorization", "Bearer " + OPENAI_API_KEY);
            request.setHeader("Content-Type", "application/json");
            request.setHeader("Accept-Charset", "UTF-8");

            // –§–æ—Ä–º—É—î–º–æ JSON-–∑–∞–ø–∏—Ç
            JSONObject json = new JSONObject();
            json.put("model", "gpt-3.5-turbo");
            json.put("temperature", 0.7);
            json.put("max_tokens", 500);

            JSONArray messages = new JSONArray();
            messages.put(new JSONObject().put("role", "system").put("content",
                    "–¢–∏ ‚Äî AI, —è–∫–∏–π –ø–æ–≤–∏–Ω–µ–Ω –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç, —Ä–æ–±–ª—è—á–∏ –π–æ–≥–æ –±—ñ–ª—å—à —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º, —Ü—ñ–∫–∞–≤–∏–º —ñ –ª–µ–≥–∫–∏–º –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è. " +
                            "–ó–º—ñ–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—á–µ–Ω—å, –¥–æ–¥–∞–π —Å–∏–Ω–æ–Ω—ñ–º–∏ —Ç–∞ —Å–ø—Ä–æ—Å—Ç—å —Å–∫–ª–∞–¥–Ω—ñ —Ñ—Ä–∞–∑–∏. " +
                            "–ó–±–µ—Ä–µ–∂–∏ —Å–µ–Ω—Å, –∞–ª–µ —Ç–µ–∫—Å—Ç –º–∞—î –±—É—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º."
            ));
            messages.put(new JSONObject().put("role", "user").put("content", "–ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π —Ü–µ–π —Ç–µ–∫—Å—Ç: " + originalText));

            json.put("messages", messages);
            System.out.println("üì© JSON-–∑–∞–ø–∏—Ç –¥–æ OpenAI: " + json.toString(2));

            StringEntity entity = new StringEntity(json.toString(), "UTF-8");
            request.setEntity(entity);

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ GPT-4
            try (CloseableHttpResponse response = client.execute(request);
                 BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()))) {

                StringBuilder result = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    result.append(line);
                }
                System.out.println("üìù OpenAI API Response: " + result.toString());

                JSONObject responseJson = new JSONObject(result.toString());

                // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API
                if (responseJson.has("error")) {
                    String errorMessage = responseJson.getJSONObject("error").getString("message");
                    System.out.println("‚ùå OpenAI API Error: " + errorMessage);
                    return "‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI: " + errorMessage;
                }

                return responseJson.getJSONArray("choices").getJSONObject(0).getJSONObject("message").getString("content");
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞–Ω–Ω—ñ —Ç–µ–∫—Å—Ç—É.";
        }
    }

    // üîπ –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å
    private byte[] modifyImage(byte[] imageData) {
        return imageData;
    }

    // üîπ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    private void saveOriginalPost(int originalId, String newText, byte[] newImage) {
        String sql = "INSERT INTO original_posts (original_post_id, new_text, new_image) VALUES (?, ?, ?)";

        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, originalId);
            stmt.setString(2, newText);
            stmt.setBytes(3, newImage);
            stmt.executeUpdate();
            System.out.println("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ `original_posts`!");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}